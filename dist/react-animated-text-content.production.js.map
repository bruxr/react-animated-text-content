{"version":3,"file":"react-animated-text-content.production.js","sources":["../src/constants.ts","../src/styles/AnimatedFragment.styled.ts","../src/index.tsx"],"sourcesContent":["import { AnimationShapeType, AnimationType } from './types';\n\nexport const PREDEFINED_ANIMATIONS: Record<AnimationType, AnimationShapeType> =\n  {\n    blocks: {\n      y: '-40px',\n    },\n    wave: {\n      y: '40px',\n    },\n    float: { x: '200px', y: '0' },\n    bounce: { y: '200px', ease: 'cubic-bezier(0.68, -0.55, 0.265, 1.55)' },\n    throw: {\n      y: '200px',\n      scale: 4,\n    },\n    diagonal: {\n      x: '200px',\n      y: '-200px',\n      ease: 'cubic-bezier(0.68, -4.55, 0.265, 1.55)',\n      duration: 0.6,\n    },\n  };\n\nexport const WHITE_SPACE_CODE = '&nbsp;';\nexport const DEFAULT_INTERVAL = 0.04;\nexport const DEFAULT_TYPE = 'words';\nexport const DEFAULT_ANIMATION = {\n  y: '-30px',\n};\nexport const DEFAULT_ANIMATION_TYPE = null;\nexport const DEFAULT_TAG = 'div';\nexport const DEFAULT_INTESECTION_OBSERVER_ROOT_MARGIN = '200px';\nexport const DEFAULT_THRESHOLD = 0;\n","import styled, { css } from 'styled-components';\n\nimport { AnimationShapeType } from '../types';\n\nexport const AnimatedFragment = styled.div<{\n  count?: number;\n  interval?: number;\n}>`\n  position: relative;\n  display: inline-block;\n  visibility: hidden;\n`;\n\nexport const StyledWrapper = styled.div<{\n  uid: string;\n  count: number;\n  interval: number;\n  shouldAnimate: boolean;\n  animation: AnimationShapeType;\n}>`\n  @keyframes fragmentletter-${({ uid }) => uid} {\n    0% {\n      opacity: 0;\n      visibility: hidden;\n      transform: translateX(${({ animation: { x } }) => x ?? 0})\n        translateY(${({ animation: { y } }) => y ?? 0})\n        scale(${({ animation: { scale } }) => scale ?? 1});\n    }\n    100% {\n      oapcity: 1;\n      visibility: visible;\n      transform: translateY(0) translateX(0) scale(1);\n    }\n  }\n\n  font-size: 2rem;\n  margin-bottom: 1000px;\n  margin-top: 200px;\n\n  & > span {\n    display: inline-block;\n  }\n\n  & ${AnimatedFragment} {\n    animation: ${({ animation: { duration, ease } }) =>\n      `${duration ?? 0.4}s ${ease ?? 'ease-in-out'} forwards;`};\n\n    animation-name: ${({ shouldAnimate, uid }) =>\n      shouldAnimate ? `fragmentletter-${uid}` : ''};\n  }\n\n  ${({ count = 0, interval }) => {\n    let styles = '';\n\n    for (let i = 0; i < count; i += 1) {\n      styles += `${AnimatedFragment}:nth-of-type(${i + 1}) {\n            animation-delay: ${interval * i}s;\n          }`;\n    }\n\n    return css`\n      ${styles}\n    `;\n  }}\n`;\n","import React, {\n  useEffect,\n  useState,\n  useRef,\n  FC,\n  ReactText,\n  ReactNode,\n  ElementType,\n} from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport {\n  DEFAULT_ANIMATION,\n  DEFAULT_INTERVAL,\n  DEFAULT_INTESECTION_OBSERVER_ROOT_MARGIN,\n  DEFAULT_TAG,\n  DEFAULT_THRESHOLD,\n  DEFAULT_TYPE,\n  PREDEFINED_ANIMATIONS,\n  WHITE_SPACE_CODE,\n} from './constants';\nimport {\n  AnimatedFragment,\n  StyledWrapper,\n} from './styles/AnimatedFragment.styled';\nimport { AnimationShapeType, AnimationType } from './types';\n\ninterface Props {\n  type?: 'chars' | 'words';\n  children?: ReactText;\n  interval?: number;\n  animation?: AnimationShapeType;\n  animationType?: AnimationType;\n  tag?: ElementType;\n  className: string;\n}\n\nconst renderWords = (arrayToRender: string[]): ReactNode =>\n  arrayToRender.map((fragment, index) => (\n    <AnimatedFragment\n      key={index}\n      dangerouslySetInnerHTML={{ __html: fragment }}\n    />\n  ));\n\nconst renderChars = (arrayToRender: string[], interval: number): ReactNode => {\n  let fullIndex = -1;\n\n  return arrayToRender.map((fragment, index) => {\n    const chars =\n      fragment !== WHITE_SPACE_CODE ? Array.from(fragment) : [WHITE_SPACE_CODE];\n\n    return (\n      <span key={index}>\n        {chars.map((char, charIndex) => {\n          fullIndex += 1;\n          return (\n            <AnimatedFragment\n              key={charIndex}\n              dangerouslySetInnerHTML={{ __html: char }}\n              style={{ animationDelay: `${interval * fullIndex}s` }}\n            />\n          );\n        })}\n      </span>\n    );\n  });\n};\n\nconst AnimatedText: FC<Props> = ({\n  children = '',\n  interval = DEFAULT_INTERVAL,\n  type = DEFAULT_TYPE,\n  animation = DEFAULT_ANIMATION,\n  animationType = DEFAULT_TYPE,\n  tag = DEFAULT_TAG,\n  ...props\n}) => {\n  const [arrayToRender, setArrayToRender] = useState<string[]>([]);\n  const [shouldAnimate, setShouldAnimate] = useState(false);\n  const wrapperRef = useRef(null);\n\n  const animationOptions = PREDEFINED_ANIMATIONS?.[animationType] ?? animation;\n\n  useEffect(() => {\n    if (typeof children !== 'string' && typeof children !== 'number') {\n      console.error(\n        \"Only string (ReactText) is currently allowed as AnimatedText component's child. Please, change to proper type.\"\n      );\n      return;\n    }\n\n    const splittedChildren: string[] = children.toString().split(' ');\n\n    const mappedChildren = ([] as string[])\n      .concat(\n        ...splittedChildren.map((word, index) =>\n          index !== splittedChildren.length - 1\n            ? [word, WHITE_SPACE_CODE]\n            : [word]\n        )\n      )\n      .map((word) => (word === ' ' ? WHITE_SPACE_CODE : word));\n\n    setArrayToRender(mappedChildren);\n\n    const observer = new IntersectionObserver(\n      (entries, observer) => {\n        entries.forEach((entry) => {\n          if (!entry.isIntersecting) return;\n\n          setShouldAnimate(true);\n          if (wrapperRef.current) observer.unobserve(wrapperRef.current);\n        });\n      },\n      {\n        rootMargin: DEFAULT_INTESECTION_OBSERVER_ROOT_MARGIN,\n        threshold: DEFAULT_THRESHOLD,\n      }\n    );\n\n    if (wrapperRef.current) observer.observe(wrapperRef.current);\n\n    return () => {\n      setArrayToRender([]);\n      setShouldAnimate(false);\n    };\n  }, [children, type]);\n\n  const uid = uuidv4();\n\n  return (\n    <StyledWrapper\n      as={tag}\n      count={type === 'words' ? arrayToRender.length : 0}\n      interval={interval}\n      ref={wrapperRef}\n      shouldAnimate={shouldAnimate}\n      uid={uid}\n      animation={animationOptions}\n      {...props}\n    >\n      {type === 'words'\n        ? renderWords(arrayToRender)\n        : renderChars(arrayToRender, interval)}\n    </StyledWrapper>\n  );\n};\n\nexport default AnimatedText;\n"],"names":["PREDEFINED_ANIMATIONS","blocks","y","wave","float","x","bounce","ease","throw","scale","diagonal","duration","WHITE_SPACE_CODE","DEFAULT_TYPE","DEFAULT_ANIMATION","AnimatedFragment","styled","div","StyledWrapper","_a","_b","shouldAnimate","uid","count","interval","styles","i","css","_c","children","_d","_e","type","_f","animation","_g","animationType","_h","tag","props","_j","useState","arrayToRender","setArrayToRender","_k","setShouldAnimate","wrapperRef","useRef","animationOptions","useEffect","splittedChildren","toString","split","mappedChildren","concat","map","word","index","length","observer","IntersectionObserver","entries","forEach","entry","isIntersecting","current","unobserve","rootMargin","threshold","observe","console","error","uuidv4","React","as","ref","fragment","key","dangerouslySetInnerHTML","__html","renderWords","fullIndex","chars","Array","from","char","charIndex","style","animationDelay","renderChars"],"mappings":"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"}