{"version":3,"file":"react-animated-text-content.production.js","sources":["../src/constants.ts","../src/styles/AnimatedFragment.styled.ts","../src/index.tsx","../src/helpers.ts"],"sourcesContent":["import { AnimationShapeType, AnimationType } from './types';\n\nexport const PREDEFINED_ANIMATIONS: Record<AnimationType, AnimationShapeType> =\n  {\n    blocks: {\n      y: '-40px',\n    },\n    wave: {\n      y: '40px',\n    },\n    float: { x: '200px', y: '0' },\n    bounce: { y: '200px', ease: 'cubic-bezier(0.68, -0.55, 0.265, 1.55)' },\n    throw: {\n      y: '200px',\n      scale: 1.4,\n    },\n    diagonal: {\n      x: '200px',\n      y: '-200px',\n      ease: 'cubic-bezier(0.68, -4.55, 0.265, 1.55)',\n      duration: 0.6,\n    },\n  };\n\nexport const WHITE_SPACE_CODE = ' ';\nexport const DEFAULT_INTERVAL = 0.04;\nexport const DEFAULT_TYPE = 'words';\nexport const DEFAULT_ANIMATION = {\n  y: '-30px',\n};\nexport const DEFAULT_ANIMATION_TYPE = null;\nexport const DEFAULT_TAG = 'div';\nexport const DEFAULT_INTESECTION_OBSERVER_ROOT_MARGIN = '20%';\nexport const DEFAULT_THRESHOLD = 0;\n","import styled, { css } from 'styled-components';\n\nimport { AnimationShapeType } from '../types';\n\nexport const AnimatedFragment = styled.span<{\n  count?: number;\n  interval?: number;\n}>`\n  position: relative;\n  display: inline-block;\n  visibility: hidden;\n`;\n\nexport const StyledWrapper = styled.div<{\n  uid: string;\n  count: number;\n  interval: number;\n  shouldAnimate: boolean;\n  animation: AnimationShapeType;\n}>`\n  @keyframes fragmentletter-${({ uid }) => uid} {\n    0% {\n      opacity: 0;\n      visibility: hidden;\n      transform: translateX(${({ animation: { x } }) => x ?? 0})\n        translateY(${({ animation: { y } }) => y ?? 0})\n        scale(${({ animation: { scale } }) => scale ?? 1});\n    }\n    100% {\n      oapcity: 1;\n      visibility: visible;\n      transform: translateX(0) translateY(0) scale(1);\n    }\n  }\n\n  & > span {\n    display: inline-block;\n  }\n\n  & ${AnimatedFragment} {\n    text-decoration: inherit;\n    vertical-align: inherit;\n\n    animation: ${({ animation: { duration, ease } }) =>\n      `${duration ?? 0.4}s ${ease ?? 'ease-in-out'} forwards;`};\n\n    animation-name: ${({ shouldAnimate, uid }) =>\n      shouldAnimate ? `fragmentletter-${uid}` : ''};\n  }\n\n  ${({ count = 0, interval }) => {\n    let styles = '';\n\n    for (let i = 0; i < count; i += 1) {\n      styles += `${AnimatedFragment}:nth-of-type(${i + 1}) {\n            animation-delay: ${(interval || 0.04) * i}s;\n          }`;\n    }\n\n    return css`\n      ${styles}\n    `;\n  }}\n`;\n","import React, { useEffect, useState, useRef, FC, ReactNode } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport {\n  DEFAULT_ANIMATION,\n  DEFAULT_INTERVAL,\n  DEFAULT_INTESECTION_OBSERVER_ROOT_MARGIN,\n  DEFAULT_TAG,\n  DEFAULT_THRESHOLD,\n  DEFAULT_TYPE,\n  PREDEFINED_ANIMATIONS,\n  WHITE_SPACE_CODE,\n} from './constants';\nimport { concatFragments } from './helpers';\nimport {\n  AnimatedFragment,\n  StyledWrapper,\n} from './styles/AnimatedFragment.styled';\nimport { AnimatedTextProps } from './types';\n\nconst renderWords = (\n  arrayToRender: string[],\n  includeWhiteSpaces: boolean\n): ReactNode =>\n  arrayToRender.map((fragment, index) =>\n    fragment !== WHITE_SPACE_CODE ? (\n      <AnimatedFragment\n        key={index}\n        dangerouslySetInnerHTML={{ __html: fragment }}\n      />\n    ) : (\n      (includeWhiteSpaces && (\n        <AnimatedFragment\n          key={`${index}&nbsp;`}\n          dangerouslySetInnerHTML={{ __html: '&nbsp;' }}\n        />\n      )) ||\n      WHITE_SPACE_CODE\n    )\n  );\n\nconst renderChars = (\n  arrayToRender: string[],\n  interval: number,\n  includeWhiteSpaces: boolean\n): ReactNode => {\n  let fullIndex = -1;\n\n  return arrayToRender.map((fragment, index) => {\n    const chars =\n      fragment !== WHITE_SPACE_CODE ? Array.from(fragment) : [WHITE_SPACE_CODE];\n\n    if (chars[0] !== WHITE_SPACE_CODE)\n      return (\n        <span key={index}>\n          {chars.map((char, charIndex) => {\n            fullIndex += 1;\n\n            return (\n              <AnimatedFragment\n                key={charIndex}\n                dangerouslySetInnerHTML={{ __html: char }}\n                style={{ animationDelay: `${interval * fullIndex}s` }}\n              />\n            );\n          })}\n        </span>\n      );\n\n    return includeWhiteSpaces ? (\n      <AnimatedFragment\n        key={`${index}&nbsp;`}\n        dangerouslySetInnerHTML={{ __html: '&nbsp;' }}\n        style={{ animationDelay: `${interval * fullIndex}s` }}\n      />\n    ) : (\n      WHITE_SPACE_CODE\n    );\n  });\n};\n\nconst AnimatedText: FC<AnimatedTextProps> = ({\n  children = '',\n  interval = DEFAULT_INTERVAL,\n  type = DEFAULT_TYPE,\n  animation = DEFAULT_ANIMATION,\n  animationType = DEFAULT_TYPE,\n  tag = DEFAULT_TAG,\n  includeWhiteSpaces = false,\n  rootMargin,\n  threshold,\n  ...props\n}) => {\n  const [arrayToRender, setArrayToRender] = useState<string[]>([]);\n  const [shouldAnimate, setShouldAnimate] = useState(false);\n  const wrapperRef = useRef(null);\n\n  const animationOptions = PREDEFINED_ANIMATIONS?.[animationType] ?? animation;\n\n  useEffect(() => {\n    if (typeof children !== 'string' && typeof children !== 'number') {\n      console.error(\n        \"Only string (ReactText) is currently allowed as react-animated-text-content component's child. Please, change to proper type.\"\n      );\n      return;\n    }\n\n    const concatedChildren = concatFragments(children);\n    setArrayToRender(concatedChildren);\n\n    const observer = new IntersectionObserver(\n      (entries, observer) => {\n        entries.forEach((entry) => {\n          if (!entry.isIntersecting) return;\n\n          setShouldAnimate(true);\n          if (wrapperRef.current) observer.unobserve(wrapperRef.current);\n        });\n      },\n      {\n        rootMargin: rootMargin || DEFAULT_INTESECTION_OBSERVER_ROOT_MARGIN,\n        threshold: threshold || DEFAULT_THRESHOLD,\n      }\n    );\n\n    if (wrapperRef.current) {\n      observer.observe(wrapperRef.current);\n    }\n\n    return () => {\n      setArrayToRender([]);\n      setShouldAnimate(false);\n    };\n  }, [children, type]);\n\n  const uid = uuidv4();\n\n  return (\n    <StyledWrapper\n      as={tag}\n      count={type === 'words' ? arrayToRender.length : 0}\n      interval={interval}\n      ref={wrapperRef}\n      shouldAnimate={shouldAnimate}\n      uid={uid}\n      animation={animationOptions}\n      data-testid=\"animated-text\"\n      {...props}\n    >\n      {type === 'words'\n        ? renderWords(arrayToRender, includeWhiteSpaces)\n        : renderChars(arrayToRender, interval, includeWhiteSpaces)}\n    </StyledWrapper>\n  );\n};\n\nexport default AnimatedText;\n","import { ReactText } from 'react';\nimport { WHITE_SPACE_CODE } from './constants';\n\nexport const splitChildrenToFragments = (children: ReactText) =>\n  children.toString().split(' ');\n\nexport const concatFragments = (children: ReactText) => {\n  const splittedChildren = splitChildrenToFragments(children);\n\n  return ([] as string[])\n    .concat(\n      ...splittedChildren.map((word, index) =>\n        index !== 0 ? [WHITE_SPACE_CODE, word] : [word]\n      )\n    )\n    .map((word) => (word === ' ' ? WHITE_SPACE_CODE : word));\n};\n"],"names":["PREDEFINED_ANIMATIONS","blocks","y","wave","float","x","bounce","ease","throw","scale","diagonal","duration","WHITE_SPACE_CODE","DEFAULT_TYPE","DEFAULT_ANIMATION","AnimatedFragment","styled","span","StyledWrapper","div","_a","_b","shouldAnimate","uid","count","interval","styles","i","css","_c","children","_d","_e","type","_f","animation","_g","animationType","_h","tag","_j","includeWhiteSpaces","rootMargin","threshold","props","_k","useState","arrayToRender","setArrayToRender","_l","setShouldAnimate","wrapperRef","useRef","animationOptions","useEffect","concatedChildren","splittedChildren","toString","split","splitChildrenToFragments","concat","map","word","index","concatFragments","observer","IntersectionObserver","entries","forEach","entry","isIntersecting","current","unobserve","observe","console","error","uuidv4","React","as","length","ref","fragment","key","dangerouslySetInnerHTML","__html","renderWords","fullIndex","chars","Array","from","char","charIndex","style","animationDelay","renderChars"],"mappings":"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"}